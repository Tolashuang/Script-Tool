import os
import math
from PIL import Image
from xml.etree import ElementTree

try:
    import xml.etree.cElementTree as ET
except ImportError:
    import xml.etree.ElementTree as ET

classes = [ "Body", "Hand"]

def find_x_y_w_h(size, box):
    print(size[0])
    dw = 1./size[0]
    dh = 1./size[1]
    x = (box[0] + box[1])/2.0
    y = (box[2] + box[3])/2.0
    w = box[1] - box[0]
    h = box[3] - box[2]
    x = x*dw
    w = w*dw
    y = y*dh
    h = h*dh
    return (x,y,w,h)

# os.chdir(r"C:/Users/Tolas_huang/Desktop/YOLO_database")
# files = os.listdir(r"D:/yolo_train/data/Annotations/")
files = open("C:/Users/Tolas_huang/Desktop/YOLO_database/photo_palm_xml.txt")

while (1):
    line_name = files.readline()
    files_son_name = line_name.split("/")
    #创建文件夹
    path = "C:/Users/Tolas_huang/Desktop/YOLO_database/palm_label/" + files_son_name[1] + "/"
    folder = os.path.exists(path)
    if not folder:
        os.makedirs(path)
    print(files_son_name[1])

    #在XML中摘出属性和位置信息
    fin = open(path  + "/" + files_son_name[-1][:-5] + ".txt", "w+")
    with open("C:/Users/Tolas_huang/Desktop/YOLO_database/" + "ok_palm_fist_photo_no_distortion_xml" + "/" + line_name[: -1] , 'r') as f:
        tree = ET.parse(f)
        root = tree.getroot()
        print(root[0].text)

    root_son = root.find('OBJECTS')
    for son_of_root in root_son.iter('OBJECT'):
            lstnode = son_of_root.getiterator('POINTS')
            for node in lstnode:
                for elem in son_of_root.iter(tag='TYPE'):
                    # print(elem.text)
                    lx = node.attrib['LEFTX']
                    ly = node.attrib['LEFTY']
                    rx = node.attrib['RIGHTX']
                    ry = node.attrib['RIGHTY']
                    tx = node.attrib['TOPX']
                    ty = node.attrib['TOPY']
                    bx = node.attrib['BOTTOMX']
                    by = node.attrib['BOTTOMY']
                    global labels
                    if elem.text == 'Hand':
                        labels = 1

                        #手上的斜率为O的情况
                        # k = (float(ty) - float(by)) / (float(tx) - float(bx))
                        if (float(tx) - float(bx)) == 0 or (float(ty) - float(by)) == 0 :
                            lux = float(lx)
                            luy = float(ty)
                            rux = float(rx)
                            ruy = float(ty)
                            ldx = float(lx)
                            ldy = float(by)
                            rdx = float(rx)
                            rdy = float(by)
                            cx = (lux + rux + ldx + rdx) / (4 * 640)
                            cy = (luy + ruy + ldy + rdy) / (4 * 480)
                            frw = (rux - lux) / 640
                            frh = (rdy - ruy) / 480
                            # print(labels, cx, cy, frw, frh)
                            fin.writelines("%d %f %f %f %f" % (labels, cx, cy, frw, frh))
                            fin.writelines("\n")

                        else:
                            k = (float(ty) - float(by)) / (float(tx) - float(bx))
                            a0 = -(1.0/k)
                            a1 = a0
                            a2 = k
                            a3 = k
                            b0 = float(ty) - a0 * float(tx)
                            b1 = float(by) - a1 * float(bx)
                            b2 = float(ly) - a2 * float(lx)
                            b3 = float(ry) - a3 * float(rx)
                            x_tr = (b3 - b0) / (a0 - a3)
                            y_tr = a3 * x_tr + b3
                            x_rb = (b3 - b1) / (a1 - a3)
                            y_rb = a3 * x_rb + b3
                            x_bl = (b1 - b2) / (a2 - a1)
                            y_bl = a2 * x_bl + b2
                            x_lt = (b0 - b2) / (a2 - a0)
                            y_lt = a2 * x_lt + b2

                            cx = ( x_tr + x_rb + x_bl + x_lt) / (4 * 640)
                            cy = ( y_tr + y_rb + y_bl + y_lt) / (4 * 480)
                            angle = math.atan(k)
                            fabsh = math.sqrt(pow(float(x_lt) - float(x_bl), 2) + pow(float(y_lt) - float(y_bl), 2))
                            fabsw = math.sqrt(pow(float(x_lt) - float(x_tr), 2) + pow(float(y_lt) - float(y_tr), 2))
                            frh = (fabsw * (1 - abs(math.tan(angle / 2))) + fabsh * abs(math.tan(angle / 2)))/ 480
                            frw = (fabsh * (1 - abs(math.tan(angle / 2))) + fabsw * abs(math.tan(angle / 2)))/ 640

                            # cx = (x_tr + x_rb + x_bl + x_lt) / (4 * 640)
                            # cy = (y_tr + y_rb + y_bl + y_lt) / (4 * 480)
                            # frw = (x_rb - x_bl) / 640
                            # frh = (y_bl - y_lt) / 480
                            # print("ww-----------------------")

                            # print(labels,cx,cy,frw,frh)
                            fin.writelines("%d %f %f %f %f" % (labels, cx ,cy, frw, frh))
                            fin.writelines("\n")

                            # else:
                            #     fin.writelines("%d %f %f %f %f" % (labels, cx, cy, frw, frh))
                            #     fin.writelines("\n")
                                # print(k)
                            # else:
                            #     y_tr = ((( (float(tx) - float(rx)) + ( float(ry) / k - float(ty) * k) )) / (1.0001 / k - k))
                            #     x_tr = (1 / k) * (y_tr - float(ry)) + float(rx)
                            #     y_rb = ((( (float(bx) - float(rx)) + ( float(ry) / k - float(ty) * k) )) / (1.0001 / k - k))
                            #     x_rb = (1 / k) * (y_rb - float(ry)) + float(rx)
                            #     y_bl = ((( (float(bx) - float(lx)) + ( float(ly) / k - float(by) * k) )) / (1.0001 / k - k))
                            #     x_bl = (1 / k) * (y_bl - float(ly)) + float(lx)
                            #     y_lt = ((( (float(tx) - float(lx)) + ( float(ly) / k - float(ty) * k) )) / (1.0001 / k - k))
                            #     x_lt = (1 / k) * (y_lt - float(ly)) + float(lx)
                            #     cx = ( x_tr + x_rb + x_bl + x_lt) / (4 * 640)
                            #     cy = ( y_tr + y_rb + y_bl + y_lt) / (4 * 480)
                            #     frw = abs(x_tr - x_bl) / 640
                            #     frh = abs(y_rb - y_lt) / 480
                            #     print(labels, cx, cy, frw, frh)
                            #     fin.writelines("%d %f %f %f %f" % (labels, cx,cy,frw,frh))
                            #     fin.writelines("\n")
                    else:
                        labels = 0
                        #人体矩形框的四个点确定
                        lux = float(lx)
                        luy = float(ty)
                        rux = float(rx)
                        ruy = float(ty)
                        ldx = float(lx)
                        ldy = float(by)
                        rdx = float(rx)
                        rdy = float(by)
                        cx = (lux + rux + ldx + rdx) / (4 * 640)
                        cy = (luy + ruy + ldy + rdy) / (4 * 480)
                        frw = (rux - lux ) / 640
                        frh = (rdy - ruy ) / 480
                        print(labels, cx, cy, frw, frh)
                        fin.writelines("%d %f %f %f %f" % (labels, cx, cy, frw, frh))
                        fin.writelines("\n")
            # print("========")
    if not line_name:
        break

    fin.close()
